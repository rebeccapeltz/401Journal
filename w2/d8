#### Intro to http

First Server
``` JavaScript
'use strict';

const http = require('http');
const fs = require('fs');
const url = require('url');

http.createServer((req, res) => {
  var file, statusCode;
  let parsed = url.parse(req.url, true);
  debugger;
  if (req.method === 'GET' && (req.url === '/' || req.url === '/index.html')) {
    file = fs.createReadStream(__dirname + '/index.html');
    statusCode = 200;
  } else {
    file = fs.createReadStream(__dirname + '/four_oh_four.html');
    statusCode = 404;
  }

  res.writeHead(statusCode, {
    "Content-Type": "text/html"
  });

  file.pipe(res);
}).listen(3000, () => {
  console.log('server up');
});
```



#### Testing with chai-http
The test
``` JavaScript
'use strict';

const chai = require('chai');
const chaiHttp = require('chai-http');
chai.use(chaiHttp);

const expect = chai.expect;
const request = chai.request;


//TODO load server
require('../server');

describe('Http Server testing', () => {

  it('GET / return Today is:Wed', (done) => {

    request('localhost:3000')
      .get('/')
      .end(function(err, res) {
        expect(err).to.eql(null);
        expect(res).to.have.status(200, 'this should be the code');
        expect(res.text).to.eql('Today is:' + 'Wed' + '\n');
        done();
      });

  });

  it('POST / return day of week like Wed based on month, day, year', (done) => {
    request('localhost:3000')
      .post('/')
      .send({
        month: 7,
        day: 20,
        year: 2016
      })
      .end(function(err, res) {
        expect(err).to.eql(null);
        expect(res).to.have.status(200, 'this should be the code');
        expect(res.text).to.eql('Wed');
        done();
      });
  });
});
```

#### A JSON server
Could use JSON.stringify on JSON
``` JavaScript
'use strict';
const http = require('http');
const fs = require('fs');

http.createServer((req, res) => {
  let file;
  let reqArr = req.url.split('/');
  let filename = reqArr[reqArr.length - 1];
  debugger;
  if (req.method === 'POST') {
    file = fs.createWriteStream(__dirname + '/data/' + filename);
    file.on('error', (err) => {
      if (err.text.indexOf('ENOENT') === -1) console.log(err);
      res.writeHead(500, {
        'Content-Type': 'application/json'
      });
      res.write('file for ' + filename + ' alread exists, try a PUT instead');
      res.end();
    });
    req.pipe(file);
    req.on('end', () => {
      res.writeHead(200, {
        'Content-Type': 'application/json'
      });
      res.write('{"msg":"success"}');
      res.end();
    });
  }
  if (req.method === 'GET') {
    file = fs.createReadStream(__dirname + '/data/' + filename);
    file.on('error', () => {
      res.writeHead(404, {
        'Content-Type': 'application/json'
      });
      /////////// could use JSON stringify
      res.write('{"msg":"could not find file"}');
      res.end();
    });
    file.pipe(res);
  }
}).listen(3000, () => console.log('server up'));
```

#### Promises

Making a promise around JSON.parse to catch parse errors
``` JavaScript
'use strict';

module.exports = exports = function(req) {
  return new Promise((resolve, reject) => {
    let jsonString = '';
    req.on('data', (data) => {
      jsonString = jsonString + data.toString();
    });

    req.on('end', () => {
      try {
        let parsed = JSON.parse(jsonString);
        resolve(parsed);
      } catch(e) {
        reject(e);
      }
    });
  });
};
```
Promises prove themselves worthy on async operations




#### homework: cowsay http server
